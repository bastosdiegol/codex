{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,ECOA,SAAS,EAAa,EAAO,IAAI,CAAE,EAAQ,IAAI,EAC7C,IAAM,EAAY,SAAS,cAAc,CAAC,cACpC,EAAS,SAAS,cAAc,CAAC,WACjC,EAAY,SAAS,cAAc,CAAC,cACpC,EAAa,SAAS,cAAc,CAAC,eACrC,EAAY,SAAS,cAAc,CAAC,cACpC,EAAe,SAAS,cAAc,CAAC,iBACvC,EAAa,SAAS,cAAc,CAAC,eACrC,EAAa,SAAS,cAAc,CAAC,eACrC,EAAa,SAAS,cAAc,CAAC,eACrC,EAAkB,SAAS,cAAc,CAAC,aAC1C,EAAW,SAAS,cAAc,CAAC,aAErC,GACF,EAAU,KAAK,CAAG,EAAK,KAAK,CAC5B,EAAO,KAAK,CAAG,EAAK,EAAE,CACtB,EAAU,KAAK,CAAG,EAAK,KAAK,CAC5B,EAAW,KAAK,CAAG,EAAK,MAAM,CAC9B,EAAU,KAAK,CAAG,EAAK,KAAK,CAC5B,EAAa,KAAK,CAAG,EAAK,QAAQ,CAClC,EAAW,KAAK,CAAG,EAAK,MAAM,CAC9B,EAAW,KAAK,CAAG,EAAK,MAAM,CAC9B,EAAW,KAAK,CAAC,OAAO,CAAG,iBAE3B,EAAU,KAAK,CAAG,GAClB,EAAO,KAAK,CAAG,GACX,EACF,EAAU,KAAK,CAAG,EAElB,EAAU,KAAK,CAAG,GAEpB,EAAW,KAAK,CAAG,GACnB,EAAU,KAAK,CAAG,GAClB,EAAa,KAAK,CAAG,GACrB,EAAW,KAAK,CAAG,WACnB,EAAW,KAAK,CAAG,GACnB,EAAW,KAAK,CAAC,OAAO,CAAG,QAG7B,EAAgB,SAAS,CAAC,GAAG,CAAC,QAC9B,EAAS,SAAS,CAAC,GAAG,CAAC,OACzB,CAUA,SAAS,EAAkB,CAAK,CAAE,CAAK,CAAE,CAAK,EAC5C,OAAO,EAAM,IAAI,CAAC,CAAC,EAAG,IACpB,AAAI,AAAU,QAAV,EACK,CAAC,CAAC,EAAM,CAAG,CAAC,CAAC,EAAM,CAAG,EAAI,GAE1B,CAAC,CAAC,EAAM,CAAG,CAAC,CAAC,EAAM,CAAG,EAAI,GAGvC,CAQA,SAAS,EAAc,CAAK,EAC1B,IAAM,EAAM,SAAS,aAAa,CAAC,OAEnC,OADA,EAAI,WAAW,CAAG,EACX,EAAI,SAAS,AACtB,C,E,E,O,C,e,I,G,E,E,O,C,oB,I,G,E,E,O,C,gB,I,E,G,E","sources":["<anon>","assets/scripts/utility.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"1zsFO\", function(module, exports) {\n\n$parcel$export(module.exports, \"openBookForm\", () => $124f4d46f63e3f99$export$8ce8aed2226ee40b);\n$parcel$export(module.exports, \"orderBooksArrayBy\", () => $124f4d46f63e3f99$export$90e165c601d2d9f7);\n$parcel$export(module.exports, \"sanitizeInput\", () => $124f4d46f63e3f99$export$d529ba4b6bdbcf0c);\n/**\n * Open Book Form\n * Populates form fields with book data when editing\n * or clears form fields when adding a new book entry.\n * @param {Object|null} book - Book object to populate form fields\n * @returns {void}\n */ function $124f4d46f63e3f99$export$8ce8aed2226ee40b(book = null, title = null) {\n    const formCover = document.getElementById(\"book-cover\");\n    const formId = document.getElementById(\"book-id\");\n    const formTitle = document.getElementById(\"book-title\");\n    const formAuthor = document.getElementById(\"book-author\");\n    const formGenre = document.getElementById(\"book-genre\");\n    const formProgress = document.getElementById(\"book-progress\");\n    const formStatus = document.getElementById(\"book-status\");\n    const formRating = document.getElementById(\"book-rating\");\n    const deleteBook = document.getElementById(\"delete-book\");\n    const bookFormSection = document.getElementById(\"book-form\");\n    const bookList = document.getElementById(\"book-list\");\n    if (book) {\n        formCover.value = book.cover;\n        formId.value = book.id;\n        formTitle.value = book.title;\n        formAuthor.value = book.author;\n        formGenre.value = book.genre;\n        formProgress.value = book.progress;\n        formStatus.value = book.status;\n        formRating.value = book.rating;\n        deleteBook.style.display = \"inline-block\";\n    } else {\n        formCover.value = \"\";\n        formId.value = \"\";\n        if (title) formTitle.value = title;\n        else formTitle.value = \"\";\n        formAuthor.value = \"\";\n        formGenre.value = \"\";\n        formProgress.value = \"\";\n        formStatus.value = \"Not Read\";\n        formRating.value = \"\";\n        deleteBook.style.display = \"none\";\n    }\n    bookFormSection.classList.add(\"show\");\n    bookList.classList.add(\"hide\");\n}\n/**\n * Sort Books By\n * Sorts the books array by the specified field and order.\n * @param {Array} books - Array of book objects\n * @param {string} field - Field to sort the books by\n * @param {string} order - Order to sort the books by\n * @returns {Array} - Sorted array of book objects\n */ function $124f4d46f63e3f99$export$90e165c601d2d9f7(books, field, order) {\n    return books.sort((a, b)=>{\n        if (order === \"asc\") return a[field] > b[field] ? 1 : -1;\n        else return a[field] < b[field] ? 1 : -1;\n    });\n}\n/**\n * Utility function Sanitize Input\n * Prevents XSS attacks by encoding special characters.\n * @param {string} input - User input to sanitize\n * @returns {string} - Sanitized input\n */ function $124f4d46f63e3f99$export$d529ba4b6bdbcf0c(input) {\n    const div = document.createElement(\"div\");\n    div.textContent = input;\n    return div.innerHTML;\n}\n\n});\n\n\nparcelRequire(\"1zsFO\");\n\n//# sourceMappingURL=app.7336f921.js.map\n","/**\n * Open Book Form\n * Populates form fields with book data when editing\n * or clears form fields when adding a new book entry.\n * @param {Object|null} book - Book object to populate form fields\n * @returns {void}\n */\nfunction openBookForm(book = null, title = null) {\n  const formCover = document.getElementById(\"book-cover\");\n  const formId = document.getElementById(\"book-id\");\n  const formTitle = document.getElementById(\"book-title\");\n  const formAuthor = document.getElementById(\"book-author\");\n  const formGenre = document.getElementById(\"book-genre\");\n  const formProgress = document.getElementById(\"book-progress\");\n  const formStatus = document.getElementById(\"book-status\");\n  const formRating = document.getElementById(\"book-rating\");\n  const deleteBook = document.getElementById(\"delete-book\");\n  const bookFormSection = document.getElementById(\"book-form\");\n  const bookList = document.getElementById(\"book-list\");\n\n  if (book) {\n    formCover.value = book.cover;\n    formId.value = book.id;\n    formTitle.value = book.title;\n    formAuthor.value = book.author;\n    formGenre.value = book.genre;\n    formProgress.value = book.progress;\n    formStatus.value = book.status;\n    formRating.value = book.rating;\n    deleteBook.style.display = \"inline-block\";\n  } else {\n    formCover.value = \"\";\n    formId.value = \"\";\n    if (title) {\n      formTitle.value = title;\n    } else {\n      formTitle.value = \"\";\n    }\n    formAuthor.value = \"\";\n    formGenre.value = \"\";\n    formProgress.value = \"\";\n    formStatus.value = \"Not Read\";\n    formRating.value = \"\";\n    deleteBook.style.display = \"none\";\n  }\n\n  bookFormSection.classList.add(\"show\");\n  bookList.classList.add(\"hide\");\n}\n\n/**\n * Sort Books By\n * Sorts the books array by the specified field and order.\n * @param {Array} books - Array of book objects\n * @param {string} field - Field to sort the books by\n * @param {string} order - Order to sort the books by\n * @returns {Array} - Sorted array of book objects\n */\nfunction orderBooksArrayBy(books, field, order) {\n  return books.sort((a, b) => {\n    if (order === \"asc\") {\n      return a[field] > b[field] ? 1 : -1;\n    } else {\n      return a[field] < b[field] ? 1 : -1;\n    }\n  });\n}\n\n/**\n * Utility function Sanitize Input\n * Prevents XSS attacks by encoding special characters.\n * @param {string} input - User input to sanitize\n * @returns {string} - Sanitized input\n */\nfunction sanitizeInput(input) {\n  const div = document.createElement(\"div\");\n  div.textContent = input;\n  return div.innerHTML;\n}\n\nexport { openBookForm, orderBooksArrayBy, sanitizeInput };\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$124f4d46f63e3f99$export$8ce8aed2226ee40b","book","title","formCover","document","getElementById","formId","formTitle","formAuthor","formGenre","formProgress","formStatus","formRating","deleteBook","bookFormSection","bookList","value","cover","author","genre","progress","status","rating","style","display","classList","add","$124f4d46f63e3f99$export$90e165c601d2d9f7","books","field","order","sort","a","b","$124f4d46f63e3f99$export$d529ba4b6bdbcf0c","input","div","createElement","textContent","innerHTML"],"version":3,"file":"app.7336f921.js.map"}